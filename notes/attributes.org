* Attribute Sets
The main reflex-dom pattern for working with DOM elements has two levels:

  1. Pulling together time-varying values (dynamics/etc) to specify
     the time-varying attributes of an element.
  2. Attaching the time-varying set of attributes to an actual DOM
     element in a ≈Blaze-style writer monad.

When I started using reflex-dom, I found that most of my logic lived
in layer 1. Unlike other frameworks where the *element* is the core
concept, I naturally focused on *attribute sets* /without attaching
them to a specific element/. A particular attribute set could be used
for multiple distinct DOM elements—potentially with different tags—but
even when attribute set was immediately used to write a DOM element,
the attribute set's definition /did not logically depend on the DOM
element being created/.

To reflect this, I organized my structured DOM library around two key
concepts: *attributes* and *attribute sets*.

  - attribute :: an attribute of a DOM element like ~class~ or
    ~width~. An attribute supports some type of value that can change
    over time and controls an aspect of an element.

    Note that this reasonably describes both *native* attributes of
    DOM elements as well as *logical* attributes that map a value to
    zero or more native attributes on an element.
    
  - attribute set :: a set of attribute definitions, mapping
    attributes to values that can change over time. The attributes for
    a given element often pull in values and logic from distinct parts
    of the code, so we also need a uniform mechanism for /combining/
    or /extending/ attribute sets.

** Attributes
*** Logical Attributes
Originally, I had attributes map 1:1 with the attributes defined by
HTML or SVG. However, I later found it was useful to support *logical*
attributes where a single Haskell value would map to zero or more
*native* attributes:

  1. Structured attributes. Example: ~center~ takes 2D points as
     values and maps to the native ~cx~ and ~cy~ attributes in SVG.

  2. Boolean attributes. Example: ~enabled~ is either ~Enabled~ or
     ~Disabled~. When ~Disabled~, it sets the ~disabled~ attribute
     on the element with no value; when ~Enabled~, it removes the
     ~disabled~ attribute (if set).

**** Overlap

Open design question: how should we handle an attribute set where
multiple attributes try to set a value for a single native
attribute? (Example: what do we do if somebody sets both ~center~
/and/ ~cx~?)

Thinking about it, this should probably be handled the same way as
what we do when somebody tries to define/set the same attribute
multiple times.

We might also want to provide some code facilities that make it easier
to understand how the structured definitions in an attribute set get
mapped to native attributes with string values.

** Attribute Sets
*** Nesting
Most attributes have a single scalar value (like a number or string),
but some attributes like ~style~ have a nested structure of their
own. This is important in practice: controlling an element's style
often takes more logic than setting all the other attributes!

*** Extension
In writing base reflex-dom code, a common pattern I encountered was
wanting to combine attributes from multiple places. For example, to
make an element draggable, we need to:

  1. Create the element in the DOM, passing in an attribute set
  2. Get a reference /to the created element/ so that we can add event
     handlers
  3. Change the element's attributes based on these event handlers

A function for making an element draggable would need some way to take
attributes specified by a user and then /add/ or /override/ several
CSS properties like ~transform~, ~cursor~ or ~transition~.

Attributes can be extended or overridden in different ways:

  - most attributes can only be set or overridden: an element can only
    have one ~width~, one ~background-color~... etc.
  - some attributes can be usefully combined: an element can have any
    number of CSS classes; we often want to set some classes
    statically while adding/removing other classes dynamically
  - some attributes have nested structure: the ~style~ attribute
    behaves like an attribute set itself more than as a single
    attribute

Being able to provide a set of attributes for users to extend or
extending a set of attributes provided by the user is one of the key
ways to reuse code, so we need to make sure that the way attribute
sets can be combined is intuitive and flexible.

My original design defined attribute set as a monoid. If two attribute
sets defined the same attribute, the attribute's values would combine
in a type-directed way. In most cases the value from the second
attribute set would override the value from the first; special cases
like ~class~ would have their own logic (set union in the case of
~class~).

This worked reasonably well but had a couple of limitations:

  1. The order in which sets were combined mattered, which could get
     confusing.
  2. There was no easy way to represent removing or updating existing
     attributes.

**** Diffs
An alternate design I am considering is to differentiate between
attribute sets and *diffs* between attribute sets. Instead of
combining multiple sets of attributes as a monoid, we would have an
explicit ~extend~ operation that applies a diff to a base set of
attributes. Diffs themselves would compose monoidally.

This approach makes the design more complex by introducing an extra
concept but has several advantages:

  - diffs can support operations like removing or applying a function
    to an existing attribute
  - the ~extend~ operation is not symmetric—the structure directly
    reflects which argument will override the other

Of course, if code ends up applying /multiple/ diffs to the same
attribute set, the order of diffs will matter. I expect that this will
still be clearer than the entirely symmetric monoidal operation and
will also come up a lot less often than applying a diff to a base
attribute set.

** In Haskell
Since attributes and attribute sets are key concepts for this library,
we want to reflect them directly in our code as types (~Attribute~ and
~AttributeSet~ respectively).

*** Attributes
An attribute is fundamentally defined by:

  - the attribute's name
  - which tags support the attribute
  - what values it supports

Since we want to support both *native* /and/ *logical* attributes in
Haskell, we need to know:

  - the type of Haskell values an attribute can take
  - how to map a Haskell value to zero or more DOM attributes, with
    values correctly converted to strings in the DOM

**** Tags
Most attributes only apply to certain kinds of elements. If an
attribute is set on an element that does not support that attribute,
the browser will ignore its value but will not raise an error. An
unsupported attribute /probably/ signals a mistake by the programmer,
but ignoring unsupported attributes would make it easier to share
attribute sets between different elements—we would not need to carve
a large set of attributes into element-specific pieces.

***** Typechecking Attribute Support
Ideally, we would like to track which tags support which attributes in
the type system in order to:

  1. Catch errors at compile time
  2. Provide better structure for tools (autocomplete... etc)
  3. Act as first-class documentation on tags + attributes

How can we do this cleanly in Haskell? After experimenting with the
design space, it isn't clear that we /can/: Haskell may not be
flexible enough to do this without compromising on ergonomics,
expressiveness or modularity.

My initial approach (tags in attribute types) did not work
particularly well, and attempting to fix this by tracking attribute
names at the type level—while likely an improvement over the initial
approach—ended up too complex to be worth doing. Until I come up with
something better (perhaps using an existing extensible records
library?), I'm going to keep things simple and /not/ check for
attribute compatibility statically.

****** Tags in Attribute Types
Initially, I made supported tags part of an attribute's type:

#+begin_src haskell
  id_ :: Attribute ["HTML", "SVG"] Id -- global
  src :: Attribute '["img"] Url       -- element-specific
#+end_src

Correspondingly, functions to write tags specify both the tag name
/and/ the broader namespace (~"HTML"~, ~"SVG"~... etc) in their types:

#+begin_src haskell
  img :: Dom t m => AttributeSet t "img" "HTML" -> m (Html t)
#+end_src

However, this has proved to be an awkward design.

The two-level separation between tags (~img~) and namespaces
(~HTML~) is arbitrary and doesn't always correspond to the hierarchy
in the native DOM libraries. It also leads to duplicated type-level
logic and worse error messages.

~Attributes~ knowing about tags also goes counter to the rest of the
system's design. Attributes are a first-class object in the system,
while tags are expressed as /functions that create the corresponding
element/. Tags in the attribute set's type are a problem for both:

  1. Creating a new logical attribute requires explicitly listing all
     the tags that it supports
  2. Creating a function that takes an attribute set as an argument
     requires choosing a /specific/ tag or namespace in the type which
     should be an implementation detail—even if another tag supports
     the same attributes, switching over changes the function's type.

*** Attribute Sets
**** Syntax
Even in simple examples, I needed to define /a lot/ of attribute
sets. Having nice syntax for attribute sets has a real impact on how
easy the code is to read /and/ write.
***** Operators
The normal way to define a map's values in Haskell is with a list of
pairs:
#+begin_src haskell
  example = Map.fromList
    [ ("class", "draggable card")
    , ("id", "card-1")
    ]
#+end_src

I've found that just replacing ~(,)~ with an operator is an
improvement:

#+begin_src haskell
  (=:) :: a -> b -> (a, b)
  a =: b = (a, b)
  infixr 1 =:

  example = Map.fromList
    [ "class" =: "draggable card"
    , "id" =: "card-1"
    ]
#+end_src

Combining this with ~OverloadedLists~ gives us a decent approximation
of native map syntax (albeit with some potential type inference/error
message downsides):

For our dynamic DOM logic, this has two additional advantages:

  1. The operator can abstract over GADT/existential type machinery to
     support attributes with different types of values.
  2. We can have separate operators for constant values vs dynamic
     values. No need to write ~class_ =: pure "draggable"~ anymore!

The two operators along with a way to /combine/ values for attributes
like ~class_~ made it much easier to mix constant and dynamic
values—which comes up pretty often and required a lot of syntactic
noise otherwise.

#+begin_src haskell
  [ class_ =: ["card"]
  , class_ ==: classIf "dragging" <$> dragging
  ]
#+end_src

***** Overloaded Lists
List literals are a convenient syntax for specifying attribute sets:

  1. Easy to read and format multiple definitions
  2. Avoids precedence issues between definitions—no need for noisy
     parentheses

However, there are a few disadvantages with this approach:

  1. ~OverloadedLists~ can cause inference problems and weird type
     error messages
  2. List syntax forces the type of each item to be the same. We can
     support attributes with different types of values by
     existentially quantifying the value type, but we can't surface
     the types individually

These limitations are a problem. Haskell doesn't have a great story
for row types at the best of times, but we can't even /try/ to have
them if we want to use list literals since each list item has to have
exactly the same type.

In practice, this means that list literals for attribute sets work
well when they're defined where they're used but cause problems when
they're moved to a helper variable, returned from a function... etc.
